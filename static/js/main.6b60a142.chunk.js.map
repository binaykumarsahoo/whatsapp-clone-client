{"version":3,"sources":["hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/ChatMessage.js","components/Chat.js","components/SidebarChat.js","components/NewContactModal.js","components/Contacts/Contacts.js","components/Conversations/Conversations.js","components/Sidebar.js","components/Dashboard.js","components/Login.js","App.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","console","log","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","ChatMessage","messageRef","received","className","ref","Chat","setText","setRef","node","scrollIntoView","smooth","Avatar","r","join","IconButton","SearchOutlined","lastMessage","style","fontSize","type","placeholder","onChange","e","target","onClick","SidebarChat","profilePic","active","src","NewContactModal","closeModal","idRef","useRef","nameRef","Modal","Header","closeButton","Body","Form","onSubmit","preventDefault","current","Group","Label","Control","required","Button","Contacts","setContactsOpen","color","contactId","Conversations","Sidebar","modalOpen","setModalOpen","contactsOpen","title","show","onHide","Dashboard","Login","onIdSubmit","htmlFor","App","setId","dashboard","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b60a142.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst PREFIX = 'whatsapp-clone-';\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n  }, [prefixedKey, value]);\r\n\r\n  return [value, setValue];\r\n}\r\n","import React, { useContext } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\n\r\nconst ContactsContext = React.createContext();\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactsContext);\r\n}\r\n\r\nexport function ContactsProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\r\n\r\n  function createContact(id, name) {\r\n    setContacts((prevContacts) => {\r\n      return [...prevContacts, { id, name }];\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState();\r\n\r\n  useEffect(() => {\r\n    const newSocket = io('https://whatsapp-clone-server-binay.herokuapp.com', {\r\n      query: { id },\r\n    });\r\n    setSocket(newSocket);\r\n\r\n    return () => newSocket.close();\r\n  }, [id]);\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\r\n  );\r\n}\r\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useContacts } from './ContactsProvider';\r\nimport { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage(\r\n    'conversations',\r\n    []\r\n  );\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n  const { contacts } = useContacts();\r\n  const socket = useSocket();\r\n\r\n  function createConversation(recipients) {\r\n    // let type = 'group';\r\n    // if (recipients.length === 1) {\r\n    //   type = 'single';\r\n    //   const conversation = conversations\r\n    //     .filter((conversation) => conversation.type === 'single')\r\n    //     .find((conversation) => conversation.recipients[0] === recipients[0]);\r\n    //   if (conversation) return;\r\n    // }\r\n    setConversations((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(\r\n    ({ recipients, text, sender }) => {\r\n      setConversations((prevConversations) => {\r\n        let madeChange = false;\r\n        const newMessage = { sender, text };\r\n        const newConversations = prevConversations.map((conversation) => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            madeChange = true;\r\n            return {\r\n              ...conversation,\r\n              messages: [...conversation.messages, newMessage],\r\n            };\r\n          }\r\n          return conversation;\r\n        });\r\n\r\n        if (madeChange) {\r\n          return newConversations;\r\n        } else {\r\n          return [...prevConversations, { recipients, messages: [newMessage] }];\r\n        }\r\n      });\r\n    },\r\n    [setConversations]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on('receive-message', addMessageToConversation);\r\n\r\n    return () => socket.off('receive-message');\r\n  }, [socket, addMessageToConversation]);\r\n\r\n  function sendMessage(recipients, text) {\r\n    socket.emit('send-message', { recipients, text });\r\n\r\n    addMessageToConversation({ recipients, text, sender: id });\r\n  }\r\n\r\n  console.log(conversations);\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    console.log(conversation);\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === recipient;\r\n      });\r\n      const name = (contact && contact.name) || recipient;\r\n      return { id: recipient, name };\r\n    });\r\n\r\n    const messages = conversation.messages.map((message) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === message.sender;\r\n      });\r\n      const name = (contact && contact.name) || message.sender;\r\n      const fromMe = id === message.sender;\r\n      return { ...message, senderName: name, fromMe };\r\n    });\r\n\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, messages, recipients, selected };\r\n  });\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  };\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n  return a.every((element, index) => {\r\n    return element === b[index];\r\n  });\r\n}\r\n","import React from 'react';\r\nimport './ChatMessage.css';\r\n\r\nexport default function ChatMessage({ messageRef, message, received }) {\r\n  return (\r\n    <div\r\n      className={`chatMessage ${received ? 'message-in' : 'message-out'}`}\r\n      ref={messageRef}\r\n    >\r\n      <div className={`text`}>{message}</div>\r\n    </div>\r\n  );\r\n}\r\n","import { Avatar, IconButton } from '@material-ui/core';\r\nimport React, { useState, useCallback } from 'react';\r\nimport './Chat.css';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { SearchOutlined } from '@material-ui/icons';\r\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\r\nimport AttachFileOutlinedIcon from '@material-ui/icons/AttachFileOutlined';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ChatMessage from './ChatMessage';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function Chat() {\r\n  const [text, setText] = useState('');\r\n  const setRef = useCallback((node) => {\r\n    if (node) node.scrollIntoView({ smooth: true });\r\n  }, []);\r\n  const { sendMessage, selectedConversation } = useConversations();\r\n\r\n  const handleSend = () => {\r\n    sendMessage(\r\n      selectedConversation.recipients.map((r) => r.id),\r\n      text\r\n    );\r\n    setText('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__backgroundImage\"></div>\r\n      <header className=\"chat__header\">\r\n        <div className=\"chat__headerLeft\">\r\n          <div className=\"chat__headerLeftAvatar\">\r\n            <Avatar />\r\n          </div>\r\n          <div className=\"chat__info\">\r\n            <span>\r\n              {selectedConversation.recipients.map((r) => r.name).join(', ')}\r\n            </span>\r\n            <p>last seen today at 5.44 PM</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"chat__body\">\r\n        {/* <ChatMessage message=\"Chat message\" />\r\n        <ChatMessage message=\"Chat message\" received /> */}\r\n        {selectedConversation.messages.map((message, index) => {\r\n          const lastMessage =\r\n            selectedConversation.messages.length - 1 === index;\r\n          return (\r\n            <ChatMessage\r\n              messageRef={lastMessage ? setRef : null}\r\n              message={message.text}\r\n              received={!message.fromMe}\r\n              key={index}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <footer className=\"chat__footer\">\r\n        <div className=\"chat__footerLeft\">\r\n          <IconButton>\r\n            <EmojiEmotionsOutlinedIcon style={{ fontSize: '26px' }} />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFileOutlinedIcon />\r\n          </IconButton>\r\n        </div>\r\n        <div className=\"chat__footerMiddle\">\r\n          <textarea\r\n            type=\"text\"\r\n            placeholder=\"Type a message\"\r\n            onChange={(e) => setText(e.target.value)}\r\n            value={text}\r\n          />\r\n        </div>\r\n        <div className=\"chat__footerRight\">\r\n          <IconButton>\r\n            <SendIcon onClick={handleSend} />\r\n          </IconButton>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n","import { Avatar } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './SidebarChat.css';\r\n\r\nexport default function SidebarChat({\r\n  profilePic,\r\n  name,\r\n  message,\r\n  onClick,\r\n  active,\r\n}) {\r\n  return (\r\n    <div className={`sidebarChat ${active ? 'active' : ''}`} onClick={onClick}>\r\n      <div className=\"sidebarChat__avatar\">\r\n        <Avatar src={profilePic} />\r\n      </div>\r\n      <div className=\"sidebarChat__info\">\r\n        <h2>{name}</h2>\r\n        <p>{message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\n\r\nexport default function NewContactModal({ closeModal }) {\r\n  const idRef = useRef();\r\n  const nameRef = useRef();\r\n  const { createContact } = useContacts();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    createContact(idRef.current.value, nameRef.current.value);\r\n    closeModal();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>Create Contact</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Mobile No</Form.Label>\r\n            <Form.Control type=\"number\" ref={idRef} required />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type=\"text\" ref={nameRef} required />\r\n          </Form.Group>\r\n          <Button type=\"submit\" className=\"mt-2\">\r\n            Create\r\n          </Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport './Contacts.css';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { useContacts } from '../../contexts/ContactsProvider';\r\nimport { useConversations } from '../../contexts/ConversationsProvider';\r\nimport SidebarChat from '../SidebarChat';\r\n\r\nexport default function Contacts({ setContactsOpen }) {\r\n  const { contacts } = useContacts();\r\n  const { createConversation } = useConversations();\r\n\r\n  const handleClick = (contactId) => {\r\n    createConversation([contactId]);\r\n    setContactsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"contacts\">\r\n      <header>\r\n        <div className=\"headerWrapper\">\r\n          <IconButton\r\n            className=\"iconButton\"\r\n            onClick={() => {\r\n              setContactsOpen(false);\r\n            }}\r\n          >\r\n            <ArrowBackIcon style={{ color: '#ffffff' }} />\r\n          </IconButton>\r\n          <div className=\"newChatText\">New chat</div>\r\n        </div>\r\n      </header>\r\n\r\n      {contacts.map((contact) => (\r\n        <SidebarChat\r\n          key={contact.id}\r\n          name={contact.name}\r\n          message={'Hey there! I am using WhatsApp.'}\r\n          onClick={() => handleClick(contact.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useConversations } from '../../contexts/ConversationsProvider';\r\nimport SidebarChat from '../SidebarChat';\r\n\r\nfunction Conversations() {\r\n  const { conversations, selectConversationIndex } = useConversations();\r\n\r\n  return (\r\n    <div>\r\n      {conversations.map((conversation, index) => (\r\n        <SidebarChat\r\n          key={index}\r\n          name={conversation.recipients.map((r) => r.name).join(', ')}\r\n          onClick={() => selectConversationIndex(index)}\r\n          active={conversation.selected}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Conversations;\r\n","import React, { useState } from 'react';\r\nimport './Sidebar.css';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { SearchOutlined } from '@material-ui/icons';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport SidebarChat from './SidebarChat';\r\nimport { Modal } from 'react-bootstrap';\r\nimport NewContactModal from './NewContactModal';\r\nimport Contacts from './Contacts/Contacts';\r\nimport Conversations from './Conversations/Conversations';\r\n\r\nexport default function Sidebar() {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [contactsOpen, setContactsOpen] = useState(false);\r\n\r\n  function closeModal() {\r\n    setModalOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar />\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton title=\"Status\">\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton title=\"New chat\" onClick={() => setContactsOpen(true)}>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton title=\"New Contact\" onClick={() => setModalOpen(true)}>\r\n            <AddIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n\r\n      {contactsOpen && <Contacts setContactsOpen={setContactsOpen} />}\r\n\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        <NewContactModal closeModal={closeModal} />\r\n      </Modal>\r\n\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlined />\r\n          <input type=\"text\" placeholder=\"Search or start new chat\" />\r\n        </div>\r\n      </div>\r\n\r\n      {/* <div className=\"sidebar__chats\">\r\n        <SidebarChat name=\"Binay\" />\r\n        <SidebarChat name=\"Shuvankar\" message=\"Hi\" />\r\n      </div> */}\r\n      <Conversations />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\nimport Chat from './Chat';\r\nimport './Dashboard.css';\r\nimport Sidebar from './Sidebar';\r\n\r\nexport default function Dashboard({ id }) {\r\n  const { selectedConversation } = useConversations();\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"dashboard__body\">\r\n        <Sidebar />\r\n        {selectedConversation && <Chat />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from 'react';\r\nimport './Login.css';\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n  const idRef = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    onIdSubmit(idRef.current.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"mobileNo\">Enter Your Mobile No</label>\r\n        <input type=\"number\" name=\"mpbileNo\" ref={idRef} />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Login from './components/Login';\nimport { ContactsProvider } from './contexts/ContactsProvider';\nimport { ConversationsProvider } from './contexts/ConversationsProvider';\nimport { SocketProvider } from './contexts/SocketProvider';\nimport useLocalStorage from './hooks/useLocalStorage';\n\nfunction App() {\n  const [id, setId] = useLocalStorage('id');\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n  return (\n    <div className=\"app\">{id ? dashboard : <Login onIdSubmit={setId} />}</div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}